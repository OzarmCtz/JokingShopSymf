FROM php:8.3-fpm-alpine

# Installation des dépendances système
RUN apk add --no-cache \
    git \
    curl \
    libpng-dev \
    libxml2-dev \
    zip \
    unzip \
    mysql-client \
    nginx \
    supervisor \
    nodejs \
    npm

# Installation des extensions PHP
RUN docker-php-ext-install pdo pdo_mysql gd xml opcache

# Configuration d'OPcache pour production
RUN echo "opcache.enable=1" >> /usr/local/etc/php/php.ini && \
    echo "opcache.memory_consumption=256" >> /usr/local/etc/php/php.ini && \
    echo "opcache.max_accelerated_files=20000" >> /usr/local/etc/php/php.ini && \
    echo "opcache.validate_timestamps=0" >> /usr/local/etc/php/php.ini && \
    echo "opcache.revalidate_freq=0" >> /usr/local/etc/php/php.ini && \
    echo "opcache.fast_shutdown=1" >> /usr/local/etc/php/php.ini

# Configuration PHP pour production
RUN echo "memory_limit=512M" >> /usr/local/etc/php/php.ini && \
    echo "max_execution_time=60" >> /usr/local/etc/php/php.ini && \
    echo "max_input_vars=3000" >> /usr/local/etc/php/php.ini && \
    echo "post_max_size=64M" >> /usr/local/etc/php/php.ini && \
    echo "upload_max_filesize=64M" >> /usr/local/etc/php/php.ini

# Installation de Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Création du répertoire de travail
WORKDIR /var/www/html

# Copie des fichiers de configuration Composer en premier pour optimiser le cache Docker
COPY symfony/composer.json symfony/composer.lock ./

# Installation des dépendances Composer
RUN composer install --no-dev --optimize-autoloader --no-scripts --no-interaction

# Copie du code source
COPY symfony/ .

# Installation des dépendances NPM et compilation des assets
RUN npm install && npm run build

# Finalisation de l'installation Composer avec les scripts
RUN composer dump-autoload --optimize

# Configuration des permissions
RUN chown -R www-data:www-data /var/www/html && \
    chmod -R 755 /var/www/html && \
    mkdir -p /var/www/html/var/cache /var/www/html/var/log && \
    chown -R www-data:www-data /var/www/html/var && \
    chmod -R 775 /var/www/html/var

# Configuration Nginx
COPY docker/nginx/default.conf /etc/nginx/conf.d/default.conf
RUN rm /etc/nginx/conf.d/default.conf.default

# Configuration PHP-FPM
RUN sed -i 's/listen = 127.0.0.1:9000/listen = 9000/g' /usr/local/etc/php-fpm.d/www.conf
RUN sed -i 's/;listen.allowed_clients = 127.0.0.1/listen.allowed_clients = 127.0.0.1,172.17.0.0\/16/g' /usr/local/etc/php-fpm.d/www.conf

# Configuration Supervisor
COPY docker/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Création des répertoires nécessaires
RUN mkdir -p /var/log/supervisor /run/nginx

# Variables d'environnement
ENV APP_ENV=prod
ENV COMPOSER_ALLOW_SUPERUSER=1

# Exposition des ports
EXPOSE 80 9000

# Healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Commande de démarrage
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
