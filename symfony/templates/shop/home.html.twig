{% extends 'base.html.twig' %}

{% block title %}Accueil{% endblock %}

{% block stylesheets %}
 
{% endblock %}

{% block body %}
{# Titre dynamique bas√© sur la cat√©gorie #}
{% set currentCategoryId = app.request.query.get('category') %}
{% set currentCategoryName = null %}
{% set currentCategoryDescription = null %}
{% if currentCategoryId %}
  {% for category in categories %}
    {% if category.id == currentCategoryId|number_format(0, '', '') %}
      {% set currentCategoryName = category.name|capitalize %}
      {% set currentCategoryDescription = category.description %}
    {% endif %}
  {% endfor %}
{% endif %}

 

{# SORT BAR #}
{% set q = app.request.query.all %}
{% set currentSort = q.sort ?? 'newest' %}
{% set sortLabel = {
  'price_asc': 'Prix : Croissant',
  'price_desc': 'Prix : D√©croissant',
  'newest': 'Nouveau'
}[currentSort] ?? 'Nouveau' %}
{% set route = app.request.attributes.get('_route') %}


<div class="hero-banner rounded-3 text-center mb-3">
  <h1 class="m-0 fw-bold text-white hero-title">
    {% if currentCategoryName %}
      {{ currentCategoryDescription }}
    {% else %}
      Bienvenue sur la boutique de blagues !
    {% endif %}
  </h1>
</div>


<!-- Hero -->
 



<div class="d-flex justify-content-between align-items-center mb-4">
    <div class="d-flex align-items-center gap-2 flex-grow-1">
        {% if currentCategoryName %}
            <h3 class="mb-0 text-white" style="font-size: 1.5rem; font-weight: 600;">
                Blagues {{ currentCategoryName }} ({{ jokes|length }})
            </h3>
        {% else %}
            <h3 class="mb-0 text-white" style="font-size: 1.5rem; font-weight: 600;">
                Toutes les blagues ({{ jokes|length }})
            </h3>
        {% endif %}
    </div>
    <div class="d-flex align-items-center gap-2">
        <span class="jk-sort-label" style="font-size: 1rem; font-weight: 600;">Trier par</span>
        <div class="dropdown">
            <button
                class="btn jk-sort-toggle dropdown-toggle"
                type="button"
                id="sortDropdown"
                data-bs-toggle="dropdown"
                data-bs-display="static"
                aria-expanded="false">
                <span class="jk-sort-text">{{ sortLabel }}</span>
            </button>
            <ul class="dropdown-menu jk-menu" aria-labelledby="sortDropdown">
                <li>
                    <a class="dropdown-item d-flex justify-content-between align-items-center {% if currentSort == 'price_asc' %}is-active{% endif %}"
                         href="{{ path(route, q|merge({'sort':'price_asc','page':1})) }}">
                        <span>Prix : Croissant</span>
                        {% if currentSort == 'price_asc' %}<i class="fa-solid fa-check jk-check"></i>{% endif %}
                    </a>
                </li>
                <li>
                    <a class="dropdown-item d-flex justify-content-between align-items-center {% if currentSort == 'price_desc' %}is-active{% endif %}"
                         href="{{ path(route, q|merge({'sort':'price_desc','page':1})) }}">
                        <span>Prix : D√©croissant</span>
                        {% if currentSort == 'price_desc' %}<i class="fa-solid fa-check jk-check"></i>{% endif %}
                    </a>
                </li>
                <li>
                    <a class="dropdown-item d-flex justify-content-between align-items-center {% if currentSort == 'newest' %}is-active{% endif %}"
                         href="{{ path(route, q|merge({'sort':'newest','page':1})) }}">
                        <span>Nouveau</span>
                        {% if currentSort == 'newest' %}<i class="fa-solid fa-check jk-check"></i>{% endif %}
                    </a>
                </li>
            </ul>
        </div>
    </div>
</div>

<div class="cards-grid">
  {% for joke in jokes %}
    <div class="card card-bundle" onclick="openJokeDetailModal({{ joke.id }}, '{{ joke.title|e('js') }}', '{{ joke.description|e('js')|raw }}', '{{ joke.viewImage ? asset('uploads/jokes/' ~ joke.viewImage) : (joke.previewImage ? asset('uploads/jokes/' ~ joke.previewImage) : asset('images/placeholder.jpg')) }}', {{ joke.price }}, '{{ joke.category ? joke.category.name : 'Non cat√©goris√©' }}')">
      <div class="bundle-media">
        {% if joke.previewImage %}
          <img src="{{ asset('uploads/jokes/' ~ joke.previewImage) }}" alt="{{ joke.title }}">
        {% else %}
          <img src="{{ asset('images/placeholder.jpg') }}" alt="Placeholder">
        {% endif %}
      </div>
      <div class="bundle-body">
        <h5 class="bundle-title">{{ joke.title }}</h5>
         <span class="joke-category" id="detail-category">{{ joke.category ? joke.category.name : 'Non cat√©goris√©' }}</span>
        <div class="bundle-action-slot">
          <span class="bundle-price">‚Ç¨{{ joke.price|number_format(2, ',', ' ') }}</span>
          <button class="bundle-cta" 
                  onclick="event.stopPropagation(); openPaymentModal({{ joke.id }}, '{{ joke.title|e('js') }}', {{ joke.price }})"
                  aria-label="Acheter pour {{ joke.price|number_format(2, ',', ' ') }} euros">
             Acheter pour ‚Ç¨{{ joke.price|number_format(2, ',', ' ') }}
          </button>
        </div>
      </div>
    </div>
  {% else %}
    <div class="text-muted py-5">
      Aucune blague trouv√©e.
    </div>
  {% endfor %}
</div>

<!-- Modal de Paiement avec Stripe Elements -->
<div class="modal fade" id="paymentModal" tabindex="-1" aria-labelledby="paymentModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <!-- Banni√®re en cover au top -->
            <div class="payment-banner">
                <img src="{{ asset('images/payment-banner.png') }}" alt="Banni√®re" class="banner-cover">
                <button type="button" class="btn-close banner-close" onclick="closePaymentModal()" aria-label="Close"></button>
            </div>
            
            <div class="modal-body">
                <!-- √âtape 1: Informations de paiement avec Stripe Elements -->
                <div id="step-card" class="payment-step">
                  
                    
                    <form id="payment-form">
                        <div class="row">
                            <div class="col-12 mb-3">
                                <label for="email" class="form-label">Email *</label>
                                <input type="email" class="form-control" id="email" 
                                       value="{{ app.user ? app.user.email : '' }}" required>
                                <div class="invalid-feedback" id="email-error"></div>
                                <small class="form-text text-muted">La blague sera envoy√©e √† cette adresse</small>
                            </div>
                        </div>
                        
                        <!-- Stripe Elements Container -->
                        <div class="row">
                            <div class="col-12 mb-3">
                                <label class="form-label">Informations de carte *</label>
                                <div id="card-element" class="stripe-element">
                                    <!-- Stripe Elements will create form elements here -->
                                </div>
                                <div id="card-errors" role="alert" class="invalid-feedback"></div>
                            </div>
                        </div>
                        
                        <!-- Nom sur la carte -->
                        <div class="row">
                            <div class="col-12 mb-3">
                                <label for="card-holder-name" class="form-label">Nom sur la carte *</label>
                                <input type="text" class="form-control" id="card-holder-name" 
                                        required>
                                <div class="invalid-feedback" id="card-holder-name-error"></div>
                            </div>
                        </div>
                        
                        <div class="payment-test-info">
                            <small class="text-success">
                                <i class="fas fa-info-circle me-1"></i>
                                Test: 4242 4242 4242 4242 | 12/28 | 123
                            </small>
                        </div>
                    </form>
                </div>

                <!-- √âtape 2: Adresse de facturation -->
                <div id="step-billing" class="payment-step" style="display: none;">
                    <div class="step-header mb-4">
                        <h6 class="step-title">üìç Adresse de facturation</h6>
                        <p class="step-subtitle text-muted">Informations requises pour la facturation</p>
                    </div>
                    
                    <form id="billing-form">
                        <div class="row">
                            <div class="col-12 mb-3">
                                <label for="country" class="form-label">Pays *</label>
                                <select class="form-select" id="country" required>
                                    <option value="">S√©lectionner un pays</option>
                                    <option value="FR" selected>France</option>
                                    <option value="BE">Belgique</option>
                                    <option value="CH">Suisse</option>
                                    <option value="CA">Canada</option>
                                    <option value="US">√âtats-Unis</option>
                                </select>
                                <div class="invalid-feedback" id="country-error"></div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-12 mb-3">
                                <label for="address" class="form-label">Adresse *</label>
                                <input type="text" class="form-control" id="address" 
                                       value="{{ app.user ? app.user.address : '' }}"
                                       list="address-suggestions" required>
                                <datalist id="address-suggestions"></datalist>
                                <div class="invalid-feedback" id="address-error"></div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="city" class="form-label">Ville *</label>
                                <input type="text" class="form-control" id="city" required>
                                <div class="invalid-feedback" id="city-error"></div>
                            </div>
                            <div class="col-md-3 mb-3">
                                <label for="region" class="form-label">R√©gion</label>
                                <input type="text" class="form-control" id="region">
                                <div class="invalid-feedback" id="region-error"></div>
                            </div>
                            <div class="col-md-3 mb-3">
                                <label for="postal-code" class="form-label">Code postal *</label>
                                <input type="text" class="form-control" id="postal-code" required>
                                <div class="invalid-feedback" id="postal-code-error"></div>
                            </div>
                        </div>
                    </form>
                </div>

                <!-- √âtape 3: Processing -->
                <div id="step-processing" class="payment-step" style="display: none;">
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary mb-3" style="width: 3rem; height: 3rem;" role="status">
                            <span class="visually-hidden">Traitement...</span>
                        </div>
                        <h6 class="step-title">üîí Traitement du paiement</h6>
                        <p class="text-muted">Traitement s√©curis√© en cours...</p>
                        <small class="text-muted">Ne fermez pas cette fen√™tre</small>
                    </div>
                </div>

                <!-- √âtape 4: Succ√®s -->
                <div id="step-success" class="payment-step" style="display: none;">
                    <div class="text-center py-4">
                        <div class="success-animation mb-4">
                            <i class="fas fa-check-circle text-success" style="font-size: 4rem;"></i>
                        </div>
                        <h4 class="text-success mb-3">üéâ Paiement r√©ussi !</h4>
                        <div class="success-details">
                            <div class="alert alert-success">
                                <h6 class="mb-2">Votre blague a √©t√© envoy√©e !</h6>
                                <p class="mb-1">
                                    <i class="fas fa-envelope me-2"></i>
                                    <strong id="success-email"></strong>
                                </p>
                                <small class="text-muted">V√©rifiez votre bo√Æte de r√©ception et vos spams</small>
                            </div>
                            <div class="joke-preview p-3 border rounded">
                                <h6 id="success-joke-title" class="mb-2"></h6>
                                <p class="text-muted mb-0">Commande #<span id="success-order-id"></span></p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- √âtape 5: Erreur -->
                <div id="step-error" class="payment-step" style="display: none;">
                    <div class="text-center py-4">
                        <div class="error-animation mb-4">
                            <i class="fas fa-times-circle text-danger" style="font-size: 4rem;"></i>
                        </div>
                        <h4 class="text-danger mb-3">‚ùå Erreur de paiement</h4>
                        <div class="alert alert-danger">
                            <p id="error-message" class="mb-0"></p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="modal-footer" id="modal-footer">
                <!-- Informations du produit -->
                <div class="product-info d-flex align-items-center">
                    <div class="product-details">
                        <div class="product-title" id="footer-product-title">
                            <i class="fas fa-laugh me-1"></i><span>Titre de la blague</span>
                        </div>
                        <div class="product-price" id="footer-product-price">
                            <i class="fas fa-tag me-1"></i><span class="fw-bold text-success">0.99‚Ç¨</span>
                        </div>
                    </div>
                </div>
                
                <!-- Boutons d'action -->
                <div class="modal-actions">
                    <button type="button" class="btn btn-secondary" onclick="closePaymentModal()">Annuler</button>
                    <button type="button" class="btn btn-outline-secondary" id="back-btn" onclick="previousStep()" style="display: none;">
                        <i class="fas fa-arrow-left me-1"></i>Retour
                    </button>
                    <button type="button" class="btn btn-primary" id="next-btn" onclick="nextStep()">
                        Continuer
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de D√©tails de la Blague -->
<div class="modal fade" id="jokeDetailModal" tabindex="-1" aria-labelledby="jokeDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content joke-detail-modal">
            <div class="modal-header border-0 p-0">
                <button type="button" class="btn-close joke-detail-close" onclick="closeJokeDetailModal()" aria-label="Close"></button>
            </div>
            <div class="modal-body p-0">
                <div class="joke-detail-container">
                    <!-- Partie gauche: Informations -->
                    <div class="joke-detail-info">
                        <div class="joke-detail-header">
                            <div class="joke-detail-extra-image" style="text-align: center; margin: 20px 0;">
                                <img id="detail-extra-image" src="{{asset('images/joke.png')}}" alt="Image suppl√©mentaire" style="max-width: 80%; height: auto; display: inline-block;" />
                            </div>
                            <span class="joke-category" id="modal-detail-category">Cat√©gorie</span>
                            <h3 class="joke-title" id="detail-title">Titre de la blague</h3>
                            <p class="joke-description" id="detail-description">Description de la blague...</p>
                            <!-- Partie image centr√©e sous la description -->
                        </div>
                        
                        <div class="joke-detail-footer">
                            <div class="joke-price-section">
                                <span class="joke-price-label">Prix</span>
                                <span class="joke-price" id="detail-price">‚Ç¨9.99</span>
                            </div>
                            <button class="joke-buy-btn" id="detail-buy-btn" onclick="">
                                <i class="fas fa-shopping-cart me-2"></i>
                                Acheter maintenant
                            </button>
                        </div>
                    </div>
                    
                    <!-- Partie droite: Image -->
                    <div class="joke-detail-image">
                        <img id="detail-image" src="" alt="" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<!-- Charger Stripe.js -->
<script src="https://js.stripe.com/v3/"></script>

<script>
// Configuration Stripe
const stripe = Stripe('{{ stripe_public_key }}');
let elements, cardElement, paymentIntent;
let stripeInitialized = false;
let modalOpenCount = 0;
let currentStep = 1;
let currentJoke = {};

// Fonction d'initialisation pour nettoyer les styles des boutons au chargement
function initializeButtonStyles() {
    // R√©initialiser l'opacit√© des boutons bundle-cta pour que l'effet hover fonctionne
    const buyButtons = document.querySelectorAll('.bundle-cta');
    buyButtons.forEach(btn => {
        btn.style.opacity = ''; // Supprime le style inline pour laisser le CSS prendre le contr√¥le
    });
    console.log('Button styles initialized - hover effects restored');
}

// Initialiser au chargement de la page
document.addEventListener('DOMContentLoaded', initializeButtonStyles);

// Fonction pour ouvrir le modal de paiement
function openPaymentModal(jokeId, jokeTitle, jokePrice) {
    modalOpenCount++;
    console.log('Opening payment modal (count: ' + modalOpenCount + '):', jokeId, jokeTitle, jokePrice);
    
    currentJoke = {
        id: jokeId,
        title: jokeTitle,
        price: jokePrice
    };
    
    // V√©rifier que l'√©l√©ment modal existe
    const modalElement = document.getElementById('paymentModal');
    if (!modalElement) {
        console.error('Modal element not found!');
        alert('Erreur: √âl√©ment modal non trouv√©.');
        return;
    }
    
    // Mettre √† jour le titre du modal
    const modalLabel = document.getElementById('paymentModalLabel');
    if (modalLabel) {
        modalLabel.innerHTML = `<i class="fas fa-credit-card me-2"></i>Acheter "${jokeTitle}" - ‚Ç¨${jokePrice}`;
    }
    
    // Mettre √† jour les informations du produit dans le footer
    const footerTitle = document.getElementById('footer-product-title');
    const footerPrice = document.getElementById('footer-product-price');
    
    console.log('Updating footer info:', footerTitle, footerPrice);
    
    if (footerTitle) {
        footerTitle.innerHTML = `<i class="fas fa-laugh me-1"></i><span>${jokeTitle}</span>`;
        console.log('Updated footer title:', jokeTitle);
    }
    
    if (footerPrice) {
        footerPrice.innerHTML = `<i class="fas fa-tag me-1"></i><span class="fw-bold text-success">${jokePrice}‚Ç¨</span>`;
        console.log('Updated footer price:', jokePrice);
    }
    
    // R√©initialiser le modal
    resetModal();
    
    // Ouvrir le modal avec du JavaScript vanilla (sans Bootstrap JS)
    try {
        // Afficher le modal manuellement
        modalElement.style.display = 'block';
        modalElement.classList.add('show');
        modalElement.setAttribute('aria-modal', 'true');
        modalElement.removeAttribute('aria-hidden');
        
        // Ajouter backdrop manuellement
        const backdrop = document.createElement('div');
        backdrop.className = 'modal-backdrop fade show';
        backdrop.id = 'payment-modal-backdrop';
        document.body.appendChild(backdrop);
        
        // Emp√™cher le scroll du body
        document.body.classList.add('modal-open');
        
        // Fermer le modal si on clique sur le backdrop
        backdrop.addEventListener('click', closePaymentModal);
        
        // Fermer le modal avec la touche Escape
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closePaymentModal();
            }
        });
        
        // Initialiser Stripe Elements quand le modal s'ouvre
        setTimeout(() => {
            console.log('Forced re-initialization of Stripe Elements...');
            // Force cleanup and re-init every time
            if (cardElement) {
                try {
                    cardElement.off('change');
                    cardElement.off('ready');
                    cardElement.off('focus');
                    cardElement.off('blur');
                    cardElement.unmount();
                } catch (e) {
                    console.warn('Error during cleanup:', e);
                }
                cardElement = null;
            }
            if (elements) {
                elements = null;
            }
            
            // Clear the container but keep classes
            const cardElementContainer = document.getElementById('card-element');
            if (cardElementContainer) {
                cardElementContainer.innerHTML = '';
                // Restaurer les classes importantes pour le style
                cardElementContainer.className = 'StripeElement stripe-element';
            }
            
            // Re-initialize
            initializeStripeElements();
        }, 300);
        
    } catch (error) {
        console.error('Error opening modal:', error);
        alert('Erreur lors de l\'ouverture du modal: ' + error.message);
    }
}

// Fonction pour fermer le modal
function closePaymentModal() {
    console.log('Closing payment modal...');
    
    const modalElement = document.getElementById('paymentModal');
    const backdrop = document.getElementById('payment-modal-backdrop');
    
    if (modalElement) {
        // Fermer avec JavaScript vanilla
        modalElement.style.display = 'none';
        modalElement.classList.remove('show');
        modalElement.setAttribute('aria-hidden', 'true');
        modalElement.removeAttribute('aria-modal');
    }
    
    if (backdrop) {
        backdrop.remove();
    }
    
    // Restaurer le scroll du body
    document.body.classList.remove('modal-open');
    
    // S'assurer que TOUS les boutons de la page sont r√©activ√©s
    enableAllButtons();
    
    // Nettoyer Stripe Elements √† la fermeture
    if (cardElement) {
        try {
            console.log('Cleaning up Stripe Elements on modal close...');
            cardElement.off('change');
            cardElement.off('ready');
            cardElement.off('focus');
            cardElement.off('blur');
            cardElement.unmount();
            console.log('Stripe Elements cleaned up successfully');
        } catch (e) {
            console.warn('Error cleaning up Stripe Elements:', e);
        }
        cardElement = null;
    }
    
    if (elements) {
        elements = null;
    }
    
    // Reset du modal
    resetModal();
}

// Fonction globale pour r√©activer tous les boutons
function enableAllButtons() {
    console.log('Enabling all buttons...');
    
    // R√©activer TOUS les boutons de l'application (sauf bundle-cta pour pr√©server l'effet hover)
    const allButtons = document.querySelectorAll('button:not(.bundle-cta)');
    allButtons.forEach(btn => {
        btn.disabled = false;
        btn.style.pointerEvents = 'auto';
        btn.classList.remove('disabled');
        btn.style.opacity = '1';
    });
    
    // Sp√©cifiquement r√©activer les boutons d'achat SANS toucher √† l'opacit√© (CSS hover)
    const buyButtons = document.querySelectorAll('.bundle-cta');
    buyButtons.forEach(btn => {
        btn.disabled = false;
        btn.style.pointerEvents = 'auto';
        btn.classList.remove('disabled');
        // Ne pas toucher √† l'opacit√© pour pr√©server l'effet hover CSS
    });
    
    console.log('All buttons enabled');
}

// S'assurer que tout est initialis√© correctement au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded - initializing button states');
    enableAllButtons();
    
    // Ajouter des gestionnaires d'√©v√©nements robustes aux boutons d'achat
    const buyButtons = document.querySelectorAll('.bundle-cta');
    buyButtons.forEach(btn => {
        // S'assurer que le bouton est toujours cliquable
        btn.addEventListener('click', function(e) {
            // Si le bouton est d√©sactiv√©, le r√©activer et continuer
            if (this.disabled) {
                console.warn('Buy button was disabled, re-enabling...');
                this.disabled = false;
                this.style.pointerEvents = 'auto';
                this.classList.remove('disabled');
            }
        });
    });
    
    console.log('Button initialization complete');
});

// Initialiser Stripe Elements
function initializeStripeElements() {
    console.log('Initializing Stripe Elements... (attempt #' + (modalOpenCount + 1) + ')');
    
    // Nettoyer compl√®tement avant de r√©initialiser
    if (cardElement) {
        try {
            console.log('Cleaning up existing card element...');
            cardElement.off('change');
            cardElement.off('ready');
            cardElement.off('focus');
            cardElement.off('blur');
            cardElement.unmount();
            console.log('Card element unmounted successfully');
        } catch (e) {
            console.warn('Error during cleanup:', e);
        }
        cardElement = null;
    }
    
    if (elements) {
        elements = null;
    }
    
    // Nettoyer le DOM mais conserver les classes
    const cardElementContainer = document.getElementById('card-element');
    if (cardElementContainer) {
        cardElementContainer.innerHTML = '';
        // Restaurer les classes importantes
        cardElementContainer.className = 'StripeElement stripe-element';
        cardElementContainer.style.pointerEvents = 'auto';
        cardElementContainer.style.opacity = '1';
    }
    
    // Cr√©er de nouveaux √©l√©ments
    const appearance = {
        theme: 'night',
        variables: {
            colorPrimary: '#5865f2',
            colorBackground: '#1e1f22',
            colorText: '#dbdee1',
            colorDanger: '#ed4245',
            fontFamily: 'system-ui, sans-serif',
            spacingUnit: '4px',
            borderRadius: '6px',
        }
    };

    // Configurer les √©l√©ments avec locale fran√ßais
    elements = stripe.elements({ 
        appearance,
        locale: 'fr'
    });

    cardElement = elements.create('card', {
        style: {
            base: {
                fontSize: '16px',
                color: '#dbdee1',
                '::placeholder': {
                    color: '#b5bac1',
                },
            },
            invalid: {
                color: '#ed4245',
            },
        },
    });

    if (cardElementContainer) {
        // Monter l'√©l√©ment
        cardElement.mount('#card-element');
        console.log('Card element mounted');

        // Gestion des erreurs en temps r√©el
        cardElement.on('change', ({error}) => {
            const displayError = document.getElementById('card-errors');
            const cardElementDiv = document.getElementById('card-element');
            
            if (error) {
                displayError.textContent = error.message;
                displayError.style.display = 'block';
                cardElementDiv.classList.add('StripeElement--invalid');
            } else {
                displayError.textContent = '';
                displayError.style.display = 'none';
                cardElementDiv.classList.remove('StripeElement--invalid');
            }
        });

        cardElement.on('ready', () => {
            console.log('Stripe Elements ready');
            stripeInitialized = true;
            
            // S'assurer que le champ est accessible
            const cardElementDiv = document.getElementById('card-element');
            if (cardElementDiv) {
                cardElementDiv.style.pointerEvents = 'auto';
                cardElementDiv.style.opacity = '1';
                cardElementDiv.classList.remove('StripeElement--disabled');
            }
        });
        
        cardElement.on('focus', () => {
            console.log('Card element focused');
        });
        
        cardElement.on('blur', () => {
            console.log('Card element blurred');
        });
        
    } else {
        console.error('Card element container not found!');
    }
}

// Fonction pour g√©rer les √©tapes
function showStep(step) {
    console.log('showStep called with step:', step);
    
    // Cacher toutes les √©tapes
    document.querySelectorAll('.payment-step').forEach(el => {
        el.style.display = 'none';
    });
    
    // Afficher l'√©tape demand√©e
    const stepMap = {
        1: 'step-card',
        2: 'step-billing', 
        3: 'step-processing',
        4: 'step-success',
        5: 'step-error'
    };
    
    const stepElement = document.getElementById(stepMap[step]);
    if (stepElement) {
        stepElement.style.display = 'block';
        console.log('Showing step element:', stepMap[step]);
    } else {
        console.error('Step element not found for step:', step, 'element ID:', stepMap[step]);
    }
    
    currentStep = step;
    updateFooter();
    console.log('Current step updated to:', currentStep);
}

function nextStep() {
    if (currentStep === 1) {
        if (validateCardForm()) {
            prefillBillingAddress();
            showStep(2);
        }
    } else if (currentStep === 2) {
        if (validateBillingForm()) {
            processPayment();
        }
    }
}

function previousStep() {
    if (currentStep === 2) {
        showStep(1);
    } else if (currentStep === 5) {
        showStep(1);
    }
}

function updateFooter() {
    console.log('updateFooter called for step:', currentStep);
    const footer = document.getElementById('modal-footer');
    const backBtn = document.getElementById('back-btn');
    const nextBtn = document.getElementById('next-btn');
    
    if (currentStep === 1) {
        if (backBtn) backBtn.style.display = 'none';
        if (nextBtn) {
            nextBtn.style.display = 'inline-block';
            nextBtn.textContent = 'Continuer';
            nextBtn.disabled = false;
        }
        if (footer) footer.style.display = 'flex';
        console.log('Footer updated for step 1');
    } else if (currentStep === 2) {
        if (backBtn) backBtn.style.display = 'inline-block';
        if (nextBtn) {
            nextBtn.style.display = 'inline-block';
            nextBtn.innerHTML = '<i class="fas fa-credit-card me-1"></i>Payer ‚Ç¨' + currentJoke.price;
            nextBtn.disabled = false;
        }
        if (footer) footer.style.display = 'flex';
        console.log('Footer updated for step 2');
    } else if (currentStep >= 3) {
        if (footer) footer.style.display = 'none';
        console.log('Footer hidden for step', currentStep);
    }
}

// Validation avec erreurs dynamiques
function validateCardForm() {
    const email = document.getElementById('email').value.trim();
    const cardHolderName = document.getElementById('card-holder-name').value.trim();
    let isValid = true;
    
    // Validation email en temps r√©el
    if (!email || !isValidEmail(email)) {
        showFieldError('email', 'Adresse email valide requise');
        isValid = false;
    } else {
        clearFieldError('email');
    }
    
    // Validation du nom sur la carte
    if (!cardHolderName || cardHolderName.length < 2) {
        showFieldError('card-holder-name', 'Nom sur la carte requis (minimum 2 caract√®res)');
        isValid = false;
    } else {
        clearFieldError('card-holder-name');
    }
    
    // V√©rifier que Stripe Elements a du contenu
    // Cette validation sera am√©lior√©e par Stripe Elements lui-m√™me
    const cardElement = document.getElementById('card-element');
    if (cardElement && !cardElement.classList.contains('StripeElement--complete')) {
        const cardErrors = document.getElementById('card-errors');
        if (cardErrors) {
            cardErrors.textContent = 'Veuillez remplir les informations de carte';
            cardErrors.style.display = 'block';
        }
        isValid = false;
    }
    
    return isValid;
}

function validateBillingForm() {
    const fields = [
        { id: 'country', message: 'Pays requis' },
        { id: 'address', message: 'Adresse requise' },
        { id: 'city', message: 'Ville requise' },
        { id: 'postal-code', message: 'Code postal requis' }
    ];
    
    let isValid = true;
    
    fields.forEach(field => {
        const value = document.getElementById(field.id).value.trim();
        if (!value) {
            showFieldError(field.id, field.message);
            isValid = false;
        } else {
            clearFieldError(field.id);
        }
    });
    
    // Validation sp√©cifique code postal fran√ßais
    const country = document.getElementById('country').value;
    const postalCode = document.getElementById('postal-code').value;
    if (country === 'FR' && postalCode && !/^\d{5}$/.test(postalCode)) {
        showFieldError('postal-code', 'Code postal fran√ßais invalide (5 chiffres requis)');
        isValid = false;
    }
    
    return isValid;
}

// Pr√©-remplir l'adresse depuis les donn√©es utilisateur
function prefillBillingAddress() {
    // Parser l'adresse par d√©faut pour extraire ville, r√©gion et code postal
    const addressField = document.getElementById('address');
    const cityField = document.getElementById('city');
    const regionField = document.getElementById('region');
    const postalCodeField = document.getElementById('postal-code');
    
    if (addressField && addressField.value) {
        const address = addressField.value.trim();
        console.log('Parsing address:', address);
        
        // Regex pour extraire le code postal (5 chiffres) et la ville
        // Exemples: "Rue de Paris 77420 Champs-sur-Marne", "123 Avenue Victor Hugo 75116 Paris"
        const addressPattern = /^(.+?)\s+(\d{5})\s+(.+)$/;
        const match = address.match(addressPattern);
        
        if (match) {
            const [, streetAddress, postalCode, city] = match;
            
            // Mettre √† jour les champs
            addressField.value = streetAddress.trim();
            postalCodeField.value = postalCode;
            cityField.value = city.trim();
            
            // D√©terminer la r√©gion bas√©e sur le code postal (France)
            const region = getRegionFromPostalCode(postalCode);
            if (region) {
                regionField.value = region;
            }
            
            console.log('Parsed address:', {
                street: streetAddress.trim(),
                postalCode: postalCode,
                city: city.trim(),
                region: region
            });
        }
    }
    
    // Initialiser l'API adresse fran√ßaise
    initAddressAPI();
}

// Fonction pour d√©terminer la r√©gion depuis le code postal fran√ßais
function getRegionFromPostalCode(postalCode) {
    const code = parseInt(postalCode.substring(0, 2));
    
    const regions = {
        75: '√éle-de-France', // Paris
        77: '√éle-de-France', // Seine-et-Marne
        78: '√éle-de-France', // Yvelines
        91: '√éle-de-France', // Essonne
        92: '√éle-de-France', // Hauts-de-Seine
        93: '√éle-de-France', // Seine-Saint-Denis
        94: '√éle-de-France', // Val-de-Marne
        95: '√éle-de-France', // Val-d\'Oise
        13: 'Provence-Alpes-C√¥te d\'Azur', // Bouches-du-Rh√¥ne
        69: 'Auvergne-Rh√¥ne-Alpes', // Rh√¥ne
        59: 'Hauts-de-France', // Nord
        31: 'Occitanie', // Haute-Garonne
        33: 'Nouvelle-Aquitaine', // Gironde
        44: 'Pays de la Loire', // Loire-Atlantique
        35: 'Bretagne', // Ille-et-Vilaine
        67: 'Grand Est', // Bas-Rhin
        // Ajouter d'autres selon les besoins
    };
    
    return regions[code] || '';
}

// API Adresse de l'√âtat fran√ßais
function initAddressAPI() {
    const addressInput = document.getElementById('address');
    const datalist = document.getElementById('address-suggestions');
    
    if (!addressInput || !datalist) return;
    
    let debounceTimer;
    
    addressInput.addEventListener('input', function() {
        const query = this.value;
        
        clearTimeout(debounceTimer);
        
        if (query.length < 3) {
            datalist.innerHTML = '';
            return;
        }
        
        debounceTimer = setTimeout(() => {
            fetch(`https://api-adresse.data.gouv.fr/search/?limit=5&q=${encodeURIComponent(query)}`)
                .then(response => response.json())
                .then(data => {
                    datalist.innerHTML = '';
                    (data.features || []).forEach(feature => {
                        const option = document.createElement('option');
                        option.value = feature.properties.label;
                        option.dataset.city = feature.properties.city || '';
                        option.dataset.postcode = feature.properties.postcode || '';
                        option.dataset.context = feature.properties.context || '';
                        datalist.appendChild(option);
                    });
                })
                .catch(err => console.error('Erreur API Adresse:', err));
        }, 300);
    });
    
    // Auto-compl√©tion des champs
    addressInput.addEventListener('change', function() {
        const selectedOption = Array.from(datalist.options).find(option => option.value === this.value);
        if (selectedOption) {
            const cityField = document.getElementById('city');
            const postalCodeField = document.getElementById('postal-code');
            const regionField = document.getElementById('region');
            
            if (cityField && selectedOption.dataset.city) {
                cityField.value = selectedOption.dataset.city;
                clearFieldError('city');
            }
            if (postalCodeField && selectedOption.dataset.postcode) {
                postalCodeField.value = selectedOption.dataset.postcode;
                clearFieldError('postal-code');
            }
            if (regionField && selectedOption.dataset.context) {
                const contextParts = selectedOption.dataset.context.split(', ');
                if (contextParts.length >= 3) {
                    regionField.value = contextParts[2];
                }
            }
        }
    });
}

// Traitement du paiement avec vrai Stripe
async function processPayment() {
    showStep(3); // √âcran de traitement
    
    const nextBtn = document.getElementById('next-btn');
    const backBtn = document.getElementById('back-btn');
    
    // D√©sactiver les boutons pendant le traitement
    if (nextBtn) nextBtn.disabled = true;
    if (backBtn) backBtn.disabled = true;
    
    try {
        // 1. Cr√©er le PaymentIntent
        const response = await fetch('{{ path('payment_create_intent') }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                joke_id: currentJoke.id,
                email: document.getElementById('email').value
            })
        });
        
        const data = await response.json();
        
        if (data.error) {
            throw new Error(data.error);
        }
        
        // 2. Confirmer le paiement avec Stripe
        const { error, paymentIntent } = await stripe.confirmCardPayment(data.client_secret, {
            payment_method: {
                card: cardElement,
                billing_details: {
                    name: document.getElementById('card-holder-name').value,
                    email: document.getElementById('email').value,
                    address: {
                        line1: document.getElementById('address').value,
                        city: document.getElementById('city').value,
                        state: document.getElementById('region').value,
                        postal_code: document.getElementById('postal-code').value,
                        country: document.getElementById('country').value,
                    },
                },
            },
        });
        
        if (error) {
            throw new Error(error.message);
        }
        
        if (paymentIntent.status === 'succeeded') {
            // 3. Confirmer c√¥t√© serveur
            await confirmPaymentServer(data.order_id, paymentIntent);
        } else {
            throw new Error('Paiement non confirm√©');
        }
        
    } catch (error) {
        console.error('Payment error:', error);
        showError(error.message);
    } finally {
        // R√©activer tous les boutons dans tous les cas
        enableAllButtons();
    }
}

async function confirmPaymentServer(orderId, paymentIntent) {
    try {
        const response = await fetch(`{{ path('payment_confirm', {orderId: '__ORDER_ID__'}) }}`.replace('__ORDER_ID__', orderId), {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                country: document.getElementById('country').value,
                address: document.getElementById('address').value,
                city: document.getElementById('city').value,
                region: document.getElementById('region').value,
                postal_code: document.getElementById('postal-code').value,
                card_holder_name: document.getElementById('card-holder-name').value,
                stripe_payment_intent: paymentIntent.id,
                payment_method_id: paymentIntent.payment_method
            })
        });
        
        const data = await response.json();
        
        if (data.error) {
            throw new Error(data.error);
        }
        
        // Succ√®s !
        showSuccess(orderId);
        
    } catch (error) {
        console.error('Server confirmation error:', error);
        showError('Erreur lors de la confirmation: ' + error.message);
    }
}

function showSuccess(orderId) {
    document.getElementById('success-email').textContent = document.getElementById('email').value;
    document.getElementById('success-joke-title').textContent = currentJoke.title;
    document.getElementById('success-order-id').textContent = orderId;
    showStep(4);
    
    // Fermer automatiquement apr√®s 5 secondes
    setTimeout(() => {
        closePaymentModal();
        window.location.reload();
    }, 5000);
}

function showError(message) {
    console.error('Payment error:', message);
    document.getElementById('error-message').textContent = message;
    showStep(5);
    
    // R√©activer TOUS les boutons de l'application (pas seulement du modal)
    const allButtons = document.querySelectorAll('button');
    allButtons.forEach(btn => {
        btn.disabled = false;
        btn.style.pointerEvents = 'auto';
        btn.classList.remove('disabled');
    });
    
    // Sp√©cifiquement r√©activer les boutons d'achat SANS toucher √† l'opacit√©
    const buyButtons = document.querySelectorAll('.bundle-cta');
    buyButtons.forEach(btn => {
        btn.disabled = false;
        btn.style.pointerEvents = 'auto';
        btn.classList.remove('disabled');
        // Ne pas toucher √† l'opacit√© pour pr√©server l'effet hover CSS
    });
    
    // Nettoyer les classes de chargement
    const loadingElements = document.querySelectorAll('.loading, .spinner-border');
    loadingElements.forEach(el => {
        el.classList.remove('loading');
        if (el.classList.contains('spinner-border')) {
            el.style.display = 'none';
        }
    });
    
    // Ajouter bouton retour avec gestionnaires d'√©v√©nements appropri√©s
    setTimeout(() => {
        const footer = document.getElementById('modal-footer');
        if (footer) {
            footer.style.display = 'flex';
            footer.innerHTML = `
                <button type="button" class="btn btn-secondary" id="close-error-btn">Fermer</button>
                <button type="button" class="btn btn-primary" id="retry-error-btn">R√©essayer</button>
            `;
            
            // Ajouter les gestionnaires d'√©v√©nements aux nouveaux boutons
            const closeBtn = document.getElementById('close-error-btn');
            const retryBtn = document.getElementById('retry-error-btn');
            
            if (closeBtn) {
                closeBtn.addEventListener('click', function() {
                    closePaymentModal();
                });
            }
            
            if (retryBtn) {
                retryBtn.addEventListener('click', function() {
                    console.log('Retry button clicked');
                    resetModalAndRetry();
                });
            }
        }
    }, 100);
}

// Validation email en temps r√©el
function isValidEmail(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}

// Validation en temps r√©el des champs
document.addEventListener('DOMContentLoaded', function() {
    // Email validation en temps r√©el
    document.addEventListener('input', function(e) {
        if (e.target.id === 'email') {
            const email = e.target.value.trim();
            if (email.length > 0) {
                if (isValidEmail(email)) {
                    clearFieldError('email');
                } else {
                    showFieldError('email', 'Format d\'email invalide');
                }
            }
        }
        
        // Clear errors on input for other fields
        if (e.target.classList.contains('form-control') || e.target.classList.contains('form-select')) {
            if (e.target.value.trim().length > 0) {
                clearFieldError(e.target.id);
            }
        }
    });
});

// Fonctions utilitaires
function showFieldError(fieldId, message) {
    const field = document.getElementById(fieldId);
    const errorDiv = document.getElementById(fieldId + '-error');
    
    if (field) {
        field.classList.add('is-invalid');
    }
    if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
    }
}

function clearFieldError(fieldId) {
    const field = document.getElementById(fieldId);
    const errorDiv = document.getElementById(fieldId + '-error');
    
    if (field) {
        field.classList.remove('is-invalid');
    }
    if (errorDiv) {
        errorDiv.textContent = '';
        errorDiv.style.display = 'none';
    }
}

function resetModal() {
    console.log('Resetting modal...');
    
    // Force le reset du step
    currentStep = 1;
    
    // R√©initialiser les formulaires
    const paymentForm = document.getElementById('payment-form');
    const billingForm = document.getElementById('billing-form');
    if (paymentForm) {
        paymentForm.reset();
        console.log('Payment form reset');
    }
    if (billingForm) {
        billingForm.reset();
        console.log('Billing form reset');
    }
    
    // R√©activer TOUS les boutons de l'application (sauf bundle-cta pour pr√©server l'effet hover)
    const allButtons = document.querySelectorAll('button:not(.bundle-cta)');
    allButtons.forEach(btn => {
        btn.disabled = false;
        btn.style.pointerEvents = 'auto';
        btn.classList.remove('disabled');
        btn.style.opacity = '1';
    });
    
    // Sp√©cifiquement r√©activer les boutons d'achat SANS toucher √† l'opacit√©
    const buyButtons = document.querySelectorAll('.bundle-cta');
    buyButtons.forEach(btn => {
        btn.disabled = false;
        btn.style.pointerEvents = 'auto';
        btn.classList.remove('disabled');
        // Ne pas toucher √† l'opacit√© pour pr√©server l'effet hover CSS
    });
    
    // Remettre l'email par d√©faut
    const defaultEmail = '{{ app.user ? app.user.email : '' }}';
    if (defaultEmail) {
        const emailField = document.getElementById('email');
        if (emailField) {
            emailField.value = defaultEmail;
            console.log('Email field reset to:', defaultEmail);
        }
    }
    
    // Remettre l'adresse par d√©faut
    const defaultAddress = '{{ app.user ? app.user.address : '' }}';
    if (defaultAddress) {
        const addressField = document.getElementById('address');
        if (addressField) {
            addressField.value = defaultAddress;
            console.log('Address field reset to:', defaultAddress);
        }
    }
    
    // Nettoyer les erreurs
    document.querySelectorAll('.is-invalid').forEach(el => {
        el.classList.remove('is-invalid');
    });
    document.querySelectorAll('.invalid-feedback').forEach(el => {
        el.textContent = '';
        el.style.display = 'none';
    });
    
    // Reset Stripe Elements
    if (cardElement) {
        try {
            console.log('Resetting Stripe Elements...');
            cardElement.clear();
            console.log('Stripe card element cleared');
            
            // R√©activer le champ au cas o√π il serait d√©sactiv√©
            const cardElementDiv = document.getElementById('card-element');
            if (cardElementDiv) {
                cardElementDiv.style.pointerEvents = 'auto';
                cardElementDiv.style.opacity = '1';
                cardElementDiv.classList.remove('StripeElement--disabled');
            }
            
        } catch (e) {
            console.warn('Erreur lors du reset de Stripe Elements:', e);
            // En cas d'erreur, r√©initialiser compl√®tement
            try {
                if (cardElement && cardElement.unmount) {
                    cardElement.unmount();
                }
                cardElement = null;
                elements = null;
                
                // R√©initialiser apr√®s un d√©lai
                setTimeout(() => {
                    initializeStripeElements();
                }, 100);
            } catch (resetError) {
                console.error('Erreur lors de la r√©initialisation forc√©e:', resetError);
            }
        }
    }
    
    // Nettoyer les √©l√©ments de chargement
    const loadingElements = document.querySelectorAll('#paymentModal .loading, #paymentModal .spinner-border, .loading, .spinner-border');
    loadingElements.forEach(el => {
        el.classList.remove('loading');
        if (el.classList.contains('spinner-border')) {
            el.style.display = 'none';
        }
    });
    
    // Restaurer le footer original du modal
    const footer = document.getElementById('modal-footer');
    if (footer) {
        footer.innerHTML = `
            <button type="button" class="btn btn-secondary" onclick="closePaymentModal()">Annuler</button>
            <button type="button" class="btn btn-outline-secondary" id="back-btn" onclick="previousStep()" style="display: none;">
                <i class="fas fa-arrow-left me-1"></i>Retour
            </button>
            <button type="button" class="btn btn-primary" id="next-btn" onclick="nextStep()">
                Continuer
            </button>
        `;
        console.log('Footer restored');
    }
    
    // Force l'affichage de l'√©tape 1
    showStep(1);
    updateFooter();
    
    console.log('Modal reset complete - current step:', currentStep);
}

function resetModalAndRetry() {
    console.log('Reset modal and retry triggered');
    
    // R√©activer TOUS les boutons avant de reset
    const allButtons = document.querySelectorAll('button');
    allButtons.forEach(btn => {
        btn.disabled = false;
        btn.style.pointerEvents = 'auto';
        btn.classList.remove('disabled');
    });
    
    // Sp√©cifiquement r√©activer les boutons d'achat SANS toucher √† l'opacit√©
    const buyButtons = document.querySelectorAll('.bundle-cta');
    buyButtons.forEach(btn => {
        btn.disabled = false;
        btn.style.pointerEvents = 'auto';
        btn.classList.remove('disabled');
        // Ne pas toucher √† l'opacit√© pour pr√©server l'effet hover CSS
    });
    
    // Reset complet du modal
    resetModal();
    
    // Force l'affichage de l'√©tape 1
    setTimeout(() => {
        currentStep = 1;
        showStep(1);
        updateFooter();
        console.log('Forced step 1 display after reset');
    }, 50);
    
    console.log('Modal reset and retry complete');
}

// FONCTIONS POUR LA MODAL DE D√âTAILS DE BLAGUE
let currentJokeDetails = {};

function openJokeDetailModal(jokeId, jokeTitle, jokeDescription, jokeImage, jokePrice, jokeCategory) {
    console.log('Opening joke detail modal for joke ID:', jokeId , jokeTitle , jokeDescription , jokeImage , jokePrice , jokeCategory);
    
    // Stocker les d√©tails actuels
    currentJokeDetails = {
        id: jokeId,
        title: jokeTitle,
        description: jokeDescription,
        image: jokeImage,
        price: jokePrice,
        category: jokeCategory
    };
    
    // V√©rifier que l'√©l√©ment modal existe
    const modalElement = document.getElementById('jokeDetailModal');
    if (!modalElement) {
        console.error('Joke detail modal element not found!');
        return;
    }
    
    // Remplir les informations dans la modal
    document.getElementById('modal-detail-category').textContent = jokeCategory;
    document.getElementById('detail-title').textContent = jokeTitle;
    document.getElementById('detail-description').textContent = jokeDescription;
    document.getElementById('detail-price').textContent = `‚Ç¨${jokePrice}`;
    document.getElementById('detail-image').src = jokeImage;
    document.getElementById('detail-image').alt = jokeTitle;
    document.getElementById('detail-buy-btn').textContent = 'Acheter pour ‚Ç¨' + jokePrice;

    // Configurer le bouton d'achat
    const buyBtn = document.getElementById('detail-buy-btn');
    if (buyBtn) {
        buyBtn.onclick = function() {
            closeJokeDetailModal();
            // Petit d√©lai pour permettre la fermeture de la modal de d√©tails
            setTimeout(() => {
                openPaymentModal(jokeId, jokeTitle, jokePrice);
            }, 300);
        };
    }
    
    // Afficher la modal manuellement
    try {
        modalElement.style.display = 'block';
        modalElement.classList.add('show');
        modalElement.setAttribute('aria-modal', 'true');
        modalElement.removeAttribute('aria-hidden');
        
        // Ajouter backdrop manuellement
        const backdrop = document.createElement('div');
        backdrop.className = 'modal-backdrop fade show';
        backdrop.id = 'joke-detail-backdrop';
        document.body.appendChild(backdrop);
        
        // Emp√™cher le scroll du body
        document.body.classList.add('modal-open');
        
        // Fermer le modal si on clique sur le backdrop
        backdrop.addEventListener('click', closeJokeDetailModal);
        
        // Fermer le modal avec la touche Escape
        const escapeHandler = function(e) {
            if (e.key === 'Escape') {
                closeJokeDetailModal();
                document.removeEventListener('keydown', escapeHandler);
            }
        };
        document.addEventListener('keydown', escapeHandler);
        
        console.log('Joke detail modal opened successfully');
        
    } catch (error) {
        console.error('Error opening joke detail modal:', error);
    }
}

function closeJokeDetailModal() {
    console.log('Closing joke detail modal...');
    
    const modalElement = document.getElementById('jokeDetailModal');
    const backdrop = document.getElementById('joke-detail-backdrop');
    
    if (modalElement) {
        modalElement.style.display = 'none';
        modalElement.classList.remove('show');
        modalElement.setAttribute('aria-hidden', 'true');
        modalElement.removeAttribute('aria-modal');
    }
    
    if (backdrop) {
        backdrop.remove();
    }
    
    // Restaurer le scroll du body
    document.body.classList.remove('modal-open');
    
    console.log('Joke detail modal closed');
}
</script>

{% endblock %}
