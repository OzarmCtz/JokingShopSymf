{% extends 'base.html.twig' %}

{% block title %}Accueil{% endblock %}

{% block stylesheets %}
<style>
:root{
  --bg-primary:#2B2D31; --bg-media:#1E1F22; --line:#3F4147;
  --text:#DBDEE1; --muted:#B5BAC1;
  --sort-btn-w: 180px;
}

/* libell√© √† gauche de la dropdown */
.jk-sortbar{ justify-content:flex-start; }

/* bouton : texte align√© √† gauche, caret forc√© √† droite, pas d'effet click/focus */
.jk-sort-toggle{
  width: var(--sort-btn-w);
  background: var(--bg-primary);
  color: var(--text);
  border: 1px solid var(--line);
  border-radius: 8px;
  padding: .45rem 2rem .45rem .75rem;
  font-weight: 600;
  text-align: left;
  position: relative;
  -webkit-tap-highlight-color: transparent;
}
.jk-sort-toggle::after{
  filter: invert(1) opacity(.8);
  position: absolute;
  right: .6rem; top: 50%; transform: translateY(-50%);
  margin-left: 0 !important;
}
.jk-sort-toggle:hover,
.jk-sort-toggle:active{
  background: var(--bg-primary);
  color: var(--text);
  border-color: var(--line);
  box-shadow: none !important;
  outline: none !important;
}
.jk-sort-toggle:focus,
.jk-sort-toggle:focus-visible{
  outline: none !important;
  box-shadow: none !important;
  background: var(--bg-primary);
  color: var(--text);
  border-color: var(--line);
}

/* menu */
.jk-menu{
  background: var(--bg-primary);
  border: 1px solid var(--line);
  border-radius: 8px;
  padding: .5rem;
  min-width: var(--sort-btn-w);
}
.jk-menu .dropdown-item{
  color: var(--text);
  border-radius: 6px;
  padding: .55rem .75rem;
  display:flex; justify-content:space-between; align-items:center;
  transition: background-color 0.2s ease;
}
.jk-menu .dropdown-item:hover{
  background:#29292d;
  color: var(--text);
}
.jk-menu .dropdown-item:active,
.jk-menu .dropdown-item:focus{
  background:#29292d;
  color: var(--text);
  outline:none !important;
  box-shadow:none !important;
}

/* ic√¥ne de l'option s√©lectionn√©e */
.jk-check{ 
  color: var(--muted); 
  margin-left: 8px; /* Espace entre le nom et l'ic√¥ne */
}
</style>
{% endblock %}

{% block body %}
{# Titre dynamique bas√© sur la cat√©gorie #}
{% set currentCategoryId = app.request.query.get('category') %}
{% set currentCategoryName = null %}
{% if currentCategoryId %}
  {% for category in categories %}
    {% if category.id == currentCategoryId|number_format(0, '', '') %}
      {% set currentCategoryName = category.name|capitalize %}
    {% endif %}
  {% endfor %}
{% endif %}

{% if currentCategoryName %}
  <h1 class="mb-4 text-white">Blagues {{ currentCategoryName }} ({{ jokes|length }})</h1>
{% else %}
  <h1 class="mb-4 text-white">Toutes les blagues ({{ jokes|length }})</h1>
{% endif %}

{# SORT BAR #}
{% set q = app.request.query.all %}
{% set currentSort = q.sort ?? 'newest' %}
{% set sortLabel = {
  'price_asc': 'Prix : Croissant',
  'price_desc': 'Prix : D√©croissant',
  'newest': 'Nouveau'
}[currentSort] ?? 'Nouveau' %}
{% set route = app.request.attributes.get('_route') %}

<div class="d-flex justify-content-end align-items-center mb-4">
  <div class="d-flex align-items-center gap-2">
    <span class="jk-sort-label">Trier par</span>

    <div class="dropdown">
      <button
        class="btn jk-sort-toggle dropdown-toggle"
        type="button"
        id="sortDropdown"
        data-bs-toggle="dropdown"
        data-bs-display="static"
        aria-expanded="false">
        <span class="jk-sort-text">{{ sortLabel }}</span>
      </button>

      <ul class="dropdown-menu jk-menu" aria-labelledby="sortDropdown">
        <li>
          <a class="dropdown-item d-flex justify-content-between align-items-center {% if currentSort == 'price_asc' %}is-active{% endif %}"
             href="{{ path(route, q|merge({'sort':'price_asc','page':1})) }}">
            <span>Prix : Croissant</span>
            {% if currentSort == 'price_asc' %}<i class="fa-solid fa-check jk-check"></i>{% endif %}
          </a>
        </li>
        <li>
          <a class="dropdown-item d-flex justify-content-between align-items-center {% if currentSort == 'price_desc' %}is-active{% endif %}"
             href="{{ path(route, q|merge({'sort':'price_desc','page':1})) }}">
            <span>Prix : D√©croissant</span>
            {% if currentSort == 'price_desc' %}<i class="fa-solid fa-check jk-check"></i>{% endif %}
          </a>
        </li>
        <li>
          <a class="dropdown-item d-flex justify-content-between align-items-center {% if currentSort == 'newest' %}is-active{% endif %}"
             href="{{ path(route, q|merge({'sort':'newest','page':1})) }}">
            <span>Nouveau</span>
            {% if currentSort == 'newest' %}<i class="fa-solid fa-check jk-check"></i>{% endif %}
          </a>
        </li>
      </ul>
    </div>
  </div>
</div>

<div class="cards-grid">
  {% for joke in jokes %}
    <div class="card card-bundle">
      <div class="bundle-media">
        {% if joke.photo %}
          <img src="{{ asset('uploads/jokes/' ~ joke.photo) }}" alt="{{ joke.title }}">
        {% else %}
          <img src="{{ asset('images/placeholder.jpg') }}" alt="Placeholder">
        {% endif %}
      </div>
      <div class="bundle-body">
        <h5 class="bundle-title">{{ joke.title }}</h5>
        <div class="bundle-action-slot">
          <span class="bundle-price">‚Ç¨{{ joke.price|number_format(2, ',', ' ') }}</span>
          <button class="bundle-cta" 
                  onclick="openPaymentModal({{ joke.id }}, '{{ joke.title|e('js') }}', {{ joke.price }})"
                  aria-label="Acheter pour {{ joke.price|number_format(2, ',', ' ') }} euros">
             Acheter pour ‚Ç¨{{ joke.price|number_format(2, ',', ' ') }}
          </button>
        </div>
      </div>
    </div>
  {% else %}
    <div class="text-muted py-5">
      Aucune blague trouv√©e.
    </div>
  {% endfor %}
</div>

<!-- Modal de Paiement avec Stripe Elements -->
<div class="modal fade" id="paymentModal" tabindex="-1" aria-labelledby="paymentModalLabel" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content payment-modal">
            <div class="modal-header">
                <h5 class="modal-title" id="paymentModalLabel">
                    <i class="fas fa-credit-card me-2"></i>Finaliser l'achat
                </h5>
                <button type="button" class="btn-close" onclick="closePaymentModal()" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- √âtape 1: Informations de paiement avec Stripe Elements -->
                <div id="step-card" class="payment-step">
                    <div class="step-header mb-4">
                        <h6 class="step-title">üí≥ Informations de paiement</h6>
                        <p class="step-subtitle text-muted">Paiement s√©curis√© par Stripe</p>
                    </div>
                    
                    <form id="payment-form">
                        <div class="row">
                            <div class="col-12 mb-3">
                                <label for="email" class="form-label">Email *</label>
                                <input type="email" class="form-control" id="email" 
                                       value="{{ app.user ? app.user.email : '' }}" required>
                                <div class="invalid-feedback" id="email-error"></div>
                                <small class="form-text text-muted">La blague sera envoy√©e √† cette adresse</small>
                            </div>
                        </div>
                        
                        <!-- Stripe Elements Container -->
                        <div class="row">
                            <div class="col-12 mb-3">
                                <label class="form-label">Informations de carte *</label>
                                <div id="card-element" class="stripe-element">
                                    <!-- Stripe Elements will create form elements here -->
                                </div>
                                <div id="card-errors" role="alert" class="invalid-feedback"></div>
                            </div>
                        </div>
                        
                        <div class="payment-test-info">
                            <small class="text-success">
                                <i class="fas fa-info-circle me-1"></i>
                                Test: 4242 4242 4242 4242 | 12/28 | 123
                            </small>
                        </div>
                    </form>
                </div>

                <!-- √âtape 2: Adresse de facturation -->
                <div id="step-billing" class="payment-step" style="display: none;">
                    <div class="step-header mb-4">
                        <h6 class="step-title">üìç Adresse de facturation</h6>
                        <p class="step-subtitle text-muted">Informations requises pour la facturation</p>
                    </div>
                    
                    <form id="billing-form">
                        <div class="row">
                            <div class="col-12 mb-3">
                                <label for="country" class="form-label">Pays *</label>
                                <select class="form-select" id="country" required>
                                    <option value="">S√©lectionner un pays</option>
                                    <option value="FR" selected>France</option>
                                    <option value="BE">Belgique</option>
                                    <option value="CH">Suisse</option>
                                    <option value="CA">Canada</option>
                                    <option value="US">√âtats-Unis</option>
                                </select>
                                <div class="invalid-feedback" id="country-error"></div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-12 mb-3">
                                <label for="address" class="form-label">Adresse *</label>
                                <input type="text" class="form-control" id="address" 
                                       value="{{ app.user ? app.user.address : '' }}"
                                       list="address-suggestions" required>
                                <datalist id="address-suggestions"></datalist>
                                <div class="invalid-feedback" id="address-error"></div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="city" class="form-label">Ville *</label>
                                <input type="text" class="form-control" id="city" required>
                                <div class="invalid-feedback" id="city-error"></div>
                            </div>
                            <div class="col-md-3 mb-3">
                                <label for="region" class="form-label">R√©gion</label>
                                <input type="text" class="form-control" id="region">
                                <div class="invalid-feedback" id="region-error"></div>
                            </div>
                            <div class="col-md-3 mb-3">
                                <label for="postal-code" class="form-label">Code postal *</label>
                                <input type="text" class="form-control" id="postal-code" required>
                                <div class="invalid-feedback" id="postal-code-error"></div>
                            </div>
                        </div>
                    </form>
                </div>

                <!-- √âtape 3: Processing -->
                <div id="step-processing" class="payment-step" style="display: none;">
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary mb-3" style="width: 3rem; height: 3rem;" role="status">
                            <span class="visually-hidden">Traitement...</span>
                        </div>
                        <h6 class="step-title">üîí Traitement du paiement</h6>
                        <p class="text-muted">Traitement s√©curis√© en cours...</p>
                        <small class="text-muted">Ne fermez pas cette fen√™tre</small>
                    </div>
                </div>

                <!-- √âtape 4: Succ√®s -->
                <div id="step-success" class="payment-step" style="display: none;">
                    <div class="text-center py-4">
                        <div class="success-animation mb-4">
                            <i class="fas fa-check-circle text-success" style="font-size: 4rem;"></i>
                        </div>
                        <h4 class="text-success mb-3">üéâ Paiement r√©ussi !</h4>
                        <div class="success-details">
                            <div class="alert alert-success">
                                <h6 class="mb-2">Votre blague a √©t√© envoy√©e !</h6>
                                <p class="mb-1">
                                    <i class="fas fa-envelope me-2"></i>
                                    <strong id="success-email"></strong>
                                </p>
                                <small class="text-muted">V√©rifiez votre bo√Æte de r√©ception et vos spams</small>
                            </div>
                            <div class="joke-preview p-3 border rounded">
                                <h6 id="success-joke-title" class="mb-2"></h6>
                                <p class="text-muted mb-0">Commande #<span id="success-order-id"></span></p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- √âtape 5: Erreur -->
                <div id="step-error" class="payment-step" style="display: none;">
                    <div class="text-center py-4">
                        <div class="error-animation mb-4">
                            <i class="fas fa-times-circle text-danger" style="font-size: 4rem;"></i>
                        </div>
                        <h4 class="text-danger mb-3">‚ùå Erreur de paiement</h4>
                        <div class="alert alert-danger">
                            <p id="error-message" class="mb-0"></p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="modal-footer" id="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closePaymentModal()">Annuler</button>
                <button type="button" class="btn btn-outline-secondary" id="back-btn" onclick="previousStep()" style="display: none;">
                    <i class="fas fa-arrow-left me-1"></i>Retour
                </button>
                <button type="button" class="btn btn-primary" id="next-btn" onclick="nextStep()">
                    Continuer
                </button>
            </div>
        </div>
    </div>
</div>

<style>
/* Modal Style Discord */
.payment-modal {
    background: var(--bg-primary) !important;
    border: 1px solid var(--line) !important;
    border-radius: 12px !important;
}

.payment-modal .modal-header {
    background: var(--bg-primary) !important;
    border-bottom: 1px solid var(--line) !important;
    border-radius: 12px 12px 0 0 !important;
}

.payment-modal .modal-title {
    color: var(--text) !important;
    font-weight: 600 !important;
}

.payment-modal .btn-close {
    filter: invert(1) !important;
}

.payment-modal .modal-body {
    background: var(--bg-primary) !important;
    color: var(--text) !important;
}

.payment-modal .modal-footer {
    background: var(--bg-primary) !important;
    border-top: 1px solid var(--line) !important;
    border-radius: 0 0 12px 12px !important;
}

/* Assurer que le modal est visible */
#paymentModal {
    z-index: 1055 !important;
}

#paymentModal.show {
    display: block !important;
}

.modal-backdrop {
    z-index: 1050 !important;
}

/* √âtapes du paiement */
.payment-step {
    min-height: 300px;
}

.step-header {
    text-align: center;
    border-bottom: 1px solid var(--line);
    padding-bottom: 1rem;
}

.step-title {
    color: var(--text);
    font-weight: 600;
    margin: 0;
}

.step-subtitle {
    color: var(--muted);
    margin: 0;
    font-size: 0.9rem;
}

/* Formulaires */
.payment-modal .form-label {
    color: var(--text);
    font-weight: 500;
    margin-bottom: 0.5rem;
}

.payment-modal .form-control,
.payment-modal .form-select {
    background: var(--bg-media);
    border: 1px solid var(--line);
    color: var(--text);
    border-radius: 6px;
    padding: 0.75rem;
}

.payment-modal .form-control:focus,
.payment-modal .form-select:focus {
    background: var(--bg-media);
    border-color: #5865f2;
    color: var(--text);
    box-shadow: 0 0 0 0.2rem rgba(88, 101, 242, 0.25);
}

.payment-modal .form-control::placeholder {
    color: var(--muted);
}

.payment-modal .form-control.is-invalid {
    border-color: #ed4245;
}

.payment-modal .invalid-feedback {
    color: #ed4245;
    display: block;
}

/* Stripe Elements */
.stripe-element {
    background: var(--bg-media) !important;
    border: 1px solid var(--line) !important;
    border-radius: 6px !important;
    padding: 0.75rem !important;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out !important;
    min-height: 50px !important;
    position: relative !important;
    z-index: 1 !important;
}

.stripe-element:focus-within {
    border-color: #5865f2 !important;
    box-shadow: 0 0 0 0.2rem rgba(88, 101, 242, 0.25) !important;
}

.stripe-element.StripeElement--invalid {
    border-color: #ed4245 !important;
}

.stripe-element.StripeElement--complete {
    border-color: #57f287 !important;
}

/* Fix pour les inputs Stripe */
.StripeElement {
    background: transparent !important;
    color: var(--text) !important;
}

.StripeElement--focus {
    outline: none !important;
}

.StripeElement iframe {
    height: 50px !important;
}

/* Info de test */
.payment-test-info {
    background: rgba(87, 242, 135, 0.1);
    border: 1px solid rgba(87, 242, 135, 0.2);
    border-radius: 6px;
    padding: 0.75rem;
    margin-top: 1rem;
}

/* Animations */
.success-animation {
    animation: successPulse 0.8s ease-out;
}

.error-animation {
    animation: errorShake 0.6s ease-out;
}

@keyframes successPulse {
    0% { transform: scale(0); opacity: 0; }
    50% { transform: scale(1.1); opacity: 1; }
    100% { transform: scale(1); opacity: 1; }
}

@keyframes errorShake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-10px); }
    75% { transform: translateX(10px); }
}

/* D√©tails du succ√®s */
.success-details .alert {
    background: rgba(87, 242, 135, 0.1);
    border: 1px solid rgba(87, 242, 135, 0.2);
    color: var(--text);
}

.joke-preview {
    background: var(--bg-media);
    border-color: var(--line) !important;
}

/* Boutons */
.payment-modal .btn-primary {
    background: #5865f2;
    border-color: #5865f2;
}

.payment-modal .btn-primary:hover {
    background: #4752c4;
    border-color: #4752c4;
}

.payment-modal .btn-primary:disabled {
    background: #4752c4;
    border-color: #4752c4;
    opacity: 0.6;
}

.payment-modal .btn-secondary {
    background: var(--bg-media);
    border-color: var(--line);
    color: var(--text);
}

.payment-modal .btn-outline-secondary {
    border-color: var(--line);
    color: var(--text);
}

.payment-modal .btn-outline-secondary:hover {
    background: var(--bg-media);
    border-color: var(--line);
    color: var(--text);
}

/* Bouton style Discord */
.bundle-cta {
    border: none !important;
    background: #5865f2 !important;
    color: white !important;
    border-radius: 6px !important;
    padding: 0.5rem 1rem !important;
    font-weight: 500 !important;
    transition: all 0.2s ease !important;
    cursor: pointer !important;
    text-decoration: none !important;
}

.bundle-cta:hover {
    background: #4752c4 !important;
    color: white !important;
    text-decoration: none !important;
}
</style>

<!-- Charger Stripe.js -->
<script src="https://js.stripe.com/v3/"></script>

<script>
// Configuration Stripe
const stripe = Stripe('{{ stripe_public_key }}');
let elements, cardElement, paymentIntent;
let currentStep = 1;
let currentJoke = {};

// Fonction pour ouvrir le modal de paiement
function openPaymentModal(jokeId, jokeTitle, jokePrice) {
    console.log('Opening payment modal:', jokeId, jokeTitle, jokePrice);
    
    currentJoke = {
        id: jokeId,
        title: jokeTitle,
        price: jokePrice
    };
    
    // V√©rifier que l'√©l√©ment modal existe
    const modalElement = document.getElementById('paymentModal');
    if (!modalElement) {
        console.error('Modal element not found!');
        alert('Erreur: √âl√©ment modal non trouv√©.');
        return;
    }
    
    // Mettre √† jour le titre du modal
    const modalLabel = document.getElementById('paymentModalLabel');
    if (modalLabel) {
        modalLabel.innerHTML = `<i class="fas fa-credit-card me-2"></i>Acheter "${jokeTitle}" - ‚Ç¨${jokePrice}`;
    }
    
    // R√©initialiser le modal
    resetModal();
    
    // Ouvrir le modal en utilisant les attributs Bootstrap
    try {
        // Utiliser l'attribut data-bs-toggle si Bootstrap est d√©j√† charg√©
        modalElement.style.display = 'block';
        modalElement.classList.add('show');
        modalElement.setAttribute('aria-modal', 'true');
        modalElement.removeAttribute('aria-hidden');
        
        // Ajouter backdrop
        const backdrop = document.createElement('div');
        backdrop.className = 'modal-backdrop fade show';
        backdrop.id = 'payment-modal-backdrop';
        document.body.appendChild(backdrop);
        
        // Emp√™cher le scroll du body
        document.body.classList.add('modal-open');
        
        // Initialiser Stripe Elements quand le modal s'ouvre
        setTimeout(() => {
            initializeStripeElements();
        }, 100);
        
    } catch (error) {
        console.error('Error opening modal:', error);
        alert('Erreur lors de l\'ouverture du modal: ' + error.message);
    }
}

// Fonction pour fermer le modal
function closePaymentModal() {
    const modalElement = document.getElementById('paymentModal');
    const backdrop = document.getElementById('payment-modal-backdrop');
    
    if (modalElement) {
        modalElement.style.display = 'none';
        modalElement.classList.remove('show');
        modalElement.setAttribute('aria-hidden', 'true');
        modalElement.removeAttribute('aria-modal');
    }
    
    if (backdrop) {
        backdrop.remove();
    }
    
    // Restaurer le scroll du body
    document.body.classList.remove('modal-open');
    
    // Reset du modal
    resetModal();
}

// Initialiser Stripe Elements
function initializeStripeElements() {
    if (!elements) {
        const appearance = {
            theme: 'night',
            variables: {
                colorPrimary: '#5865f2',
                colorBackground: '#1e1f22',
                colorText: '#dbdee1',
                colorDanger: '#ed4245',
                fontFamily: 'system-ui, sans-serif',
                spacingUnit: '4px',
                borderRadius: '6px',
            }
        };

        // Configurer les √©l√©ments avec locale fran√ßais
        elements = stripe.elements({ 
            appearance,
            locale: 'fr'
        });

        cardElement = elements.create('card', {
            style: {
                base: {
                    fontSize: '16px',
                    color: '#dbdee1',
                    '::placeholder': {
                        color: '#b5bac1',
                    },
                },
                invalid: {
                    color: '#ed4245',
                },
            },
        });

        cardElement.mount('#card-element');

        // Gestion des erreurs en temps r√©el
        cardElement.on('change', ({error}) => {
            const displayError = document.getElementById('card-errors');
            if (error) {
                displayError.textContent = error.message;
                displayError.style.display = 'block';
                document.getElementById('card-element').classList.add('StripeElement--invalid');
            } else {
                displayError.textContent = '';
                displayError.style.display = 'none';
                document.getElementById('card-element').classList.remove('StripeElement--invalid');
            }
        });

        cardElement.on('ready', () => {
            console.log('Stripe Elements ready');
        });
    }
}

// Fonction pour g√©rer les √©tapes
function showStep(step) {
    // Cacher toutes les √©tapes
    document.querySelectorAll('.payment-step').forEach(el => {
        el.style.display = 'none';
    });
    
    // Afficher l'√©tape demand√©e
    const stepMap = {
        1: 'step-card',
        2: 'step-billing', 
        3: 'step-processing',
        4: 'step-success',
        5: 'step-error'
    };
    
    const stepElement = document.getElementById(stepMap[step]);
    if (stepElement) {
        stepElement.style.display = 'block';
    }
    
    currentStep = step;
    updateFooter();
}

function nextStep() {
    if (currentStep === 1) {
        if (validateCardForm()) {
            prefillBillingAddress();
            showStep(2);
        }
    } else if (currentStep === 2) {
        if (validateBillingForm()) {
            processPayment();
        }
    }
}

function previousStep() {
    if (currentStep === 2) {
        showStep(1);
    } else if (currentStep === 5) {
        showStep(1);
    }
}

function updateFooter() {
    const footer = document.getElementById('modal-footer');
    const backBtn = document.getElementById('back-btn');
    const nextBtn = document.getElementById('next-btn');
    
    if (currentStep === 1) {
        backBtn.style.display = 'none';
        nextBtn.style.display = 'inline-block';
        nextBtn.textContent = 'Continuer';
        nextBtn.disabled = false;
        footer.style.display = 'flex';
    } else if (currentStep === 2) {
        backBtn.style.display = 'inline-block';
        nextBtn.style.display = 'inline-block';
        nextBtn.innerHTML = '<i class="fas fa-credit-card me-1"></i>Payer ‚Ç¨' + currentJoke.price;
        nextBtn.disabled = false;
        footer.style.display = 'flex';
    } else if (currentStep >= 3) {
        footer.style.display = 'none';
    }
}

// Validation avec erreurs dynamiques
function validateCardForm() {
    const email = document.getElementById('email').value.trim();
    let isValid = true;
    
    // Validation email en temps r√©el
    if (!email || !isValidEmail(email)) {
        showFieldError('email', 'Adresse email valide requise');
        isValid = false;
    } else {
        clearFieldError('email');
    }
    
    // V√©rifier que Stripe Elements est rempli
    // Note: Stripe Elements g√©rera ses propres erreurs en fran√ßais
    
    return isValid;
}

function validateBillingForm() {
    const fields = [
        { id: 'country', message: 'Pays requis' },
        { id: 'address', message: 'Adresse requise' },
        { id: 'city', message: 'Ville requise' },
        { id: 'postal-code', message: 'Code postal requis' }
    ];
    
    let isValid = true;
    
    fields.forEach(field => {
        const value = document.getElementById(field.id).value.trim();
        if (!value) {
            showFieldError(field.id, field.message);
            isValid = false;
        } else {
            clearFieldError(field.id);
        }
    });
    
    // Validation sp√©cifique code postal fran√ßais
    const country = document.getElementById('country').value;
    const postalCode = document.getElementById('postal-code').value;
    if (country === 'FR' && postalCode && !/^\d{5}$/.test(postalCode)) {
        showFieldError('postal-code', 'Code postal fran√ßais invalide (5 chiffres requis)');
        isValid = false;
    }
    
    return isValid;
}

// Pr√©-remplir l'adresse depuis les donn√©es utilisateur
function prefillBillingAddress() {
    // Parser l'adresse par d√©faut pour extraire ville, r√©gion et code postal
    const addressField = document.getElementById('address');
    const cityField = document.getElementById('city');
    const regionField = document.getElementById('region');
    const postalCodeField = document.getElementById('postal-code');
    
    if (addressField && addressField.value) {
        const address = addressField.value.trim();
        console.log('Parsing address:', address);
        
        // Regex pour extraire le code postal (5 chiffres) et la ville
        // Exemples: "Rue de Paris 77420 Champs-sur-Marne", "123 Avenue Victor Hugo 75116 Paris"
        const addressPattern = /^(.+?)\s+(\d{5})\s+(.+)$/;
        const match = address.match(addressPattern);
        
        if (match) {
            const [, streetAddress, postalCode, city] = match;
            
            // Mettre √† jour les champs
            addressField.value = streetAddress.trim();
            postalCodeField.value = postalCode;
            cityField.value = city.trim();
            
            // D√©terminer la r√©gion bas√©e sur le code postal (France)
            const region = getRegionFromPostalCode(postalCode);
            if (region) {
                regionField.value = region;
            }
            
            console.log('Parsed address:', {
                street: streetAddress.trim(),
                postalCode: postalCode,
                city: city.trim(),
                region: region
            });
        }
    }
    
    // Initialiser l'API adresse fran√ßaise
    initAddressAPI();
}

// Fonction pour d√©terminer la r√©gion depuis le code postal fran√ßais
function getRegionFromPostalCode(postalCode) {
    const code = parseInt(postalCode.substring(0, 2));
    
    const regions = {
        75: '√éle-de-France', // Paris
        77: '√éle-de-France', // Seine-et-Marne
        78: '√éle-de-France', // Yvelines
        91: '√éle-de-France', // Essonne
        92: '√éle-de-France', // Hauts-de-Seine
        93: '√éle-de-France', // Seine-Saint-Denis
        94: '√éle-de-France', // Val-de-Marne
        95: '√éle-de-France', // Val-d\'Oise
        13: 'Provence-Alpes-C√¥te d\'Azur', // Bouches-du-Rh√¥ne
        69: 'Auvergne-Rh√¥ne-Alpes', // Rh√¥ne
        59: 'Hauts-de-France', // Nord
        31: 'Occitanie', // Haute-Garonne
        33: 'Nouvelle-Aquitaine', // Gironde
        44: 'Pays de la Loire', // Loire-Atlantique
        35: 'Bretagne', // Ille-et-Vilaine
        67: 'Grand Est', // Bas-Rhin
        // Ajouter d'autres selon les besoins
    };
    
    return regions[code] || '';
}

// API Adresse de l'√âtat fran√ßais
function initAddressAPI() {
    const addressInput = document.getElementById('address');
    const datalist = document.getElementById('address-suggestions');
    
    if (!addressInput || !datalist) return;
    
    let debounceTimer;
    
    addressInput.addEventListener('input', function() {
        const query = this.value;
        
        clearTimeout(debounceTimer);
        
        if (query.length < 3) {
            datalist.innerHTML = '';
            return;
        }
        
        debounceTimer = setTimeout(() => {
            fetch(`https://api-adresse.data.gouv.fr/search/?limit=5&q=${encodeURIComponent(query)}`)
                .then(response => response.json())
                .then(data => {
                    datalist.innerHTML = '';
                    (data.features || []).forEach(feature => {
                        const option = document.createElement('option');
                        option.value = feature.properties.label;
                        option.dataset.city = feature.properties.city || '';
                        option.dataset.postcode = feature.properties.postcode || '';
                        option.dataset.context = feature.properties.context || '';
                        datalist.appendChild(option);
                    });
                })
                .catch(err => console.error('Erreur API Adresse:', err));
        }, 300);
    });
    
    // Auto-compl√©tion des champs
    addressInput.addEventListener('change', function() {
        const selectedOption = Array.from(datalist.options).find(option => option.value === this.value);
        if (selectedOption) {
            const cityField = document.getElementById('city');
            const postalCodeField = document.getElementById('postal-code');
            const regionField = document.getElementById('region');
            
            if (cityField && selectedOption.dataset.city) {
                cityField.value = selectedOption.dataset.city;
                clearFieldError('city');
            }
            if (postalCodeField && selectedOption.dataset.postcode) {
                postalCodeField.value = selectedOption.dataset.postcode;
                clearFieldError('postal-code');
            }
            if (regionField && selectedOption.dataset.context) {
                const contextParts = selectedOption.dataset.context.split(', ');
                if (contextParts.length >= 3) {
                    regionField.value = contextParts[2];
                }
            }
        }
    });
}

// Traitement du paiement avec vrai Stripe
async function processPayment() {
    showStep(3); // √âcran de traitement
    
    const nextBtn = document.getElementById('next-btn');
    nextBtn.disabled = true;
    
    try {
        // 1. Cr√©er le PaymentIntent
        const response = await fetch('{{ path('payment_create_intent') }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                joke_id: currentJoke.id,
                email: document.getElementById('email').value
            })
        });
        
        const data = await response.json();
        
        if (data.error) {
            throw new Error(data.error);
        }
        
        // 2. Confirmer le paiement avec Stripe
        const { error, paymentIntent } = await stripe.confirmCardPayment(data.client_secret, {
            payment_method: {
                card: cardElement,
                billing_details: {
                    name: document.getElementById('email').value,
                    email: document.getElementById('email').value,
                    address: {
                        line1: document.getElementById('address').value,
                        city: document.getElementById('city').value,
                        state: document.getElementById('region').value,
                        postal_code: document.getElementById('postal-code').value,
                        country: document.getElementById('country').value,
                    },
                },
            },
        });
        
        if (error) {
            throw new Error(error.message);
        }
        
        if (paymentIntent.status === 'succeeded') {
            // 3. Confirmer c√¥t√© serveur
            await confirmPaymentServer(data.order_id, paymentIntent);
        } else {
            throw new Error('Paiement non confirm√©');
        }
        
    } catch (error) {
        console.error('Payment error:', error);
        showError(error.message);
    }
}

async function confirmPaymentServer(orderId, paymentIntent) {
    try {
        const response = await fetch(`{{ path('payment_confirm', {orderId: '__ORDER_ID__'}) }}`.replace('__ORDER_ID__', orderId), {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                country: document.getElementById('country').value,
                address: document.getElementById('address').value,
                city: document.getElementById('city').value,
                region: document.getElementById('region').value,
                postal_code: document.getElementById('postal-code').value,
                stripe_payment_intent: paymentIntent.id,
                payment_method_id: paymentIntent.payment_method
            })
        });
        
        const data = await response.json();
        
        if (data.error) {
            throw new Error(data.error);
        }
        
        // Succ√®s !
        showSuccess(orderId);
        
    } catch (error) {
        console.error('Server confirmation error:', error);
        showError('Erreur lors de la confirmation: ' + error.message);
    }
}

function showSuccess(orderId) {
    document.getElementById('success-email').textContent = document.getElementById('email').value;
    document.getElementById('success-joke-title').textContent = currentJoke.title;
    document.getElementById('success-order-id').textContent = orderId;
    showStep(4);
    
    // Fermer automatiquement apr√®s 5 secondes
    setTimeout(() => {
        closePaymentModal();
        window.location.reload();
    }, 5000);
}

function showError(message) {
    document.getElementById('error-message').textContent = message;
    showStep(5);
    
    // Ajouter bouton retour
    setTimeout(() => {
        const footer = document.getElementById('modal-footer');
        footer.style.display = 'flex';
        footer.innerHTML = `
            <button type="button" class="btn btn-secondary" onclick="closePaymentModal()">Fermer</button>
            <button type="button" class="btn btn-primary" onclick="showStep(1)">R√©essayer</button>
        `;
    }, 100);
}

// Validation email en temps r√©el
function isValidEmail(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}

// Validation en temps r√©el des champs
document.addEventListener('DOMContentLoaded', function() {
    // Email validation en temps r√©el
    document.addEventListener('input', function(e) {
        if (e.target.id === 'email') {
            const email = e.target.value.trim();
            if (email.length > 0) {
                if (isValidEmail(email)) {
                    clearFieldError('email');
                } else {
                    showFieldError('email', 'Format d\'email invalide');
                }
            }
        }
        
        // Clear errors on input for other fields
        if (e.target.classList.contains('form-control') || e.target.classList.contains('form-select')) {
            if (e.target.value.trim().length > 0) {
                clearFieldError(e.target.id);
            }
        }
    });
});

// Fonctions utilitaires
function showFieldError(fieldId, message) {
    const field = document.getElementById(fieldId);
    const errorDiv = document.getElementById(fieldId + '-error');
    
    if (field) {
        field.classList.add('is-invalid');
    }
    if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
    }
}

function clearFieldError(fieldId) {
    const field = document.getElementById(fieldId);
    const errorDiv = document.getElementById(fieldId + '-error');
    
    if (field) {
        field.classList.remove('is-invalid');
    }
    if (errorDiv) {
        errorDiv.textContent = '';
        errorDiv.style.display = 'none';
    }
}

function resetModal() {
    currentStep = 1;
    showStep(1);
    
    // R√©initialiser les formulaires
    document.getElementById('payment-form').reset();
    document.getElementById('billing-form').reset();
    
    // Remettre l'email par d√©faut
    const defaultEmail = '{{ app.user ? app.user.email : '' }}';
    if (defaultEmail) {
        document.getElementById('email').value = defaultEmail;
    }
    
    // Remettre l'adresse par d√©faut
    const defaultAddress = '{{ app.user ? app.user.address : '' }}';
    if (defaultAddress) {
        document.getElementById('address').value = defaultAddress;
    }
    
    // Nettoyer les erreurs
    document.querySelectorAll('.is-invalid').forEach(el => {
        el.classList.remove('is-invalid');
    });
    document.querySelectorAll('.invalid-feedback').forEach(el => {
        el.textContent = '';
        el.style.display = 'none';
    });
    
    // Reset Stripe Elements
    if (cardElement) {
        cardElement.clear();
    }
}
</script>

{% endblock %}
