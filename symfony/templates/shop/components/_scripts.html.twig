<!-- Charger Stripe.js -->
<script src="https://js.stripe.com/v3/"></script>

<script>
// Configuration Stripe
const stripe = Stripe('{{ stripe_public_key }}');
let elements, cardElement, paymentIntent;
let stripeInitialized = false;

// Fonction d'initialisation pour nettoyer les styles des boutons au chargement
function initializeButtonStyles() {
    const buyButtons = document.querySelectorAll('.bundle-cta');
    buyButtons.forEach(btn => {
        btn.style.opacity = '';
    });
    console.log('Button styles initialized - hover effects restored');
}

// Initialiser au chargement de la page
document.addEventListener('DOMContentLoaded', initializeButtonStyles);

// Fonction globale pour réactiver tous les boutons
function enableAllButtons() {
    console.log('Enabling all buttons...');
    
    const allButtons = document.querySelectorAll('button:not(.bundle-cta)');
    allButtons.forEach(btn => {
        btn.disabled = false;
        btn.style.pointerEvents = 'auto';
        btn.classList.remove('disabled');
        btn.style.opacity = '1';
    });
    
    const buyButtons = document.querySelectorAll('.bundle-cta');
    buyButtons.forEach(btn => {
        btn.disabled = false;
        btn.style.pointerEvents = 'auto';
        btn.classList.remove('disabled');
    });
    
    console.log('All buttons enabled');
}

// S'assurer que tout est initialisé correctement au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded - initializing button states');
    enableAllButtons();
    
    const buyButtons = document.querySelectorAll('.bundle-cta');
    buyButtons.forEach(btn => {
        btn.addEventListener('click', function(e) {
            if (this.disabled) {
                console.warn('Buy button was disabled, re-enabling...');
                this.disabled = false;
                this.style.pointerEvents = 'auto';
                this.classList.remove('disabled');
            }
        });
    });
    
    console.log('Button initialization complete');
});

// Initialiser Stripe Elements
function initializeStripeElements() {
    console.log('Initializing Stripe Elements...');
    
    // Nettoyer complètement avant de réinitialiser
    cleanupStripeElements();
    
    // Nettoyer le DOM mais conserver les classes
    const cardElementContainer = document.getElementById('card-element');
    if (cardElementContainer) {
        cardElementContainer.innerHTML = '';
        cardElementContainer.className = 'StripeElement stripe-element';
        cardElementContainer.style.pointerEvents = 'auto';
        cardElementContainer.style.opacity = '1';
    }
    
    // Créer de nouveaux éléments
    const appearance = {
        theme: 'night',
        variables: {
            colorPrimary: '#5865f2',
            colorBackground: '#1e1f22',
            colorText: '#dbdee1',
            colorDanger: '#ed4245',
            fontFamily: 'system-ui, sans-serif',
            spacingUnit: '4px',
            borderRadius: '6px',
        }
    };

    elements = stripe.elements({ 
        appearance,
        locale: 'fr'
    });

    cardElement = elements.create('card', {
        style: {
            base: {
                fontSize: '16px',
                color: '#dbdee1',
                '::placeholder': {
                    color: '#b5bac1',
                },
            },
            invalid: {
                color: '#ed4245',
            },
        },
    });

    if (cardElementContainer) {
        cardElement.mount('#card-element');
        console.log('Card element mounted');

        cardElement.on('change', ({error}) => {
            const displayError = document.getElementById('card-errors');
            const cardElementDiv = document.getElementById('card-element');
            
            if (error) {
                displayError.textContent = error.message;
                displayError.style.display = 'block';
                cardElementDiv.classList.add('StripeElement--invalid');
            } else {
                displayError.textContent = '';
                displayError.style.display = 'none';
                cardElementDiv.classList.remove('StripeElement--invalid');
            }
        });

        cardElement.on('ready', () => {
            console.log('Stripe Elements ready');
            stripeInitialized = true;
            
            const cardElementDiv = document.getElementById('card-element');
            if (cardElementDiv) {
                cardElementDiv.style.pointerEvents = 'auto';
                cardElementDiv.style.opacity = '1';
                cardElementDiv.classList.remove('StripeElement--disabled');
            }
        });
        
    } else {
        console.error('Card element container not found!');
    }
}

// Fonction pour nettoyer Stripe Elements
function cleanupStripeElements() {
    if (cardElement) {
        try {
            console.log('Cleaning up existing card element...');
            cardElement.off('change');
            cardElement.off('ready');
            cardElement.off('focus');
            cardElement.off('blur');
            cardElement.unmount();
            console.log('Card element unmounted successfully');
        } catch (e) {
            console.warn('Error during cleanup:', e);
        }
        cardElement = null;
    }
    
    if (elements) {
        elements = null;
    }
}

// Validation avec erreurs dynamiques
function validateCardForm() {
    const email = document.getElementById('email').value.trim();
    const cardHolderName = document.getElementById('card-holder-name').value.trim();
    let isValid = true;
    
    if (!email || !isValidEmail(email)) {
        showFieldError('email', 'Adresse email valide requise');
        isValid = false;
    } else {
        clearFieldError('email');
    }
    
    if (!cardHolderName || cardHolderName.length < 2) {
        showFieldError('card-holder-name', 'Nom sur la carte requis (minimum 2 caractères)');
        isValid = false;
    } else {
        clearFieldError('card-holder-name');
    }
    
    const cardElement = document.getElementById('card-element');
    if (cardElement && !cardElement.classList.contains('StripeElement--complete')) {
        const cardErrors = document.getElementById('card-errors');
        if (cardErrors) {
            cardErrors.textContent = 'Veuillez remplir les informations de carte';
            cardErrors.style.display = 'block';
        }
        isValid = false;
    }
    
    return isValid;
}

function validateBillingForm() {
    const fields = [
        { id: 'country', message: 'Pays requis' },
        { id: 'address', message: 'Adresse requise' },
        { id: 'city', message: 'Ville requise' },
        { id: 'postal-code', message: 'Code postal requis' }
    ];
    
    let isValid = true;
    
    fields.forEach(field => {
        const value = document.getElementById(field.id).value.trim();
        if (!value) {
            showFieldError(field.id, field.message);
            isValid = false;
        } else {
            clearFieldError(field.id);
        }
    });
    
    const country = document.getElementById('country').value;
    const postalCode = document.getElementById('postal-code').value;
    if (country === 'FR' && postalCode && !/^\d{5}$/.test(postalCode)) {
        showFieldError('postal-code', 'Code postal français invalide (5 chiffres requis)');
        isValid = false;
    }
    
    return isValid;
}

// Pré-remplir l'adresse depuis les données utilisateur
function prefillBillingAddress() {
    const addressField = document.getElementById('address');
    const cityField = document.getElementById('city');
    const regionField = document.getElementById('region');
    const postalCodeField = document.getElementById('postal-code');
    
    if (addressField && addressField.value) {
        const address = addressField.value.trim();
        console.log('Parsing address:', address);
        
        const addressPattern = /^(.+?)\s+(\d{5})\s+(.+)$/;
        const match = address.match(addressPattern);
        
        if (match) {
            const [, streetAddress, postalCode, city] = match;
            
            addressField.value = streetAddress.trim();
            postalCodeField.value = postalCode;
            cityField.value = city.trim();
            
            const region = getRegionFromPostalCode(postalCode);
            if (region) {
                regionField.value = region;
            }
            
            console.log('Parsed address:', {
                street: streetAddress.trim(),
                postalCode: postalCode,
                city: city.trim(),
                region: region
            });
        }
    }
    
    initAddressAPI();
}

// Fonction pour déterminer la région depuis le code postal français
function getRegionFromPostalCode(postalCode) {
    const code = parseInt(postalCode.substring(0, 2));
    
    const regions = {
        75: 'Île-de-France', // Paris
        77: 'Île-de-France', // Seine-et-Marne
        78: 'Île-de-France', // Yvelines
        91: 'Île-de-France', // Essonne
        92: 'Île-de-France', // Hauts-de-Seine
        93: 'Île-de-France', // Seine-Saint-Denis
        94: 'Île-de-France', // Val-de-Marne
        95: 'Île-de-France', // Val-d\'Oise
        13: 'Provence-Alpes-Côte d\'Azur', // Bouches-du-Rhône
        69: 'Auvergne-Rhône-Alpes', // Rhône
        59: 'Hauts-de-France', // Nord
        31: 'Occitanie', // Haute-Garonne
        33: 'Nouvelle-Aquitaine', // Gironde
        44: 'Pays de la Loire', // Loire-Atlantique
        35: 'Bretagne', // Ille-et-Vilaine
        67: 'Grand Est', // Bas-Rhin
    };
    
    return regions[code] || '';
}

// API Adresse de l'État français
function initAddressAPI() {
    const addressInput = document.getElementById('address');
    const datalist = document.getElementById('address-suggestions');
    
    if (!addressInput || !datalist) return;
    
    let debounceTimer;
    
    addressInput.addEventListener('input', function() {
        const query = this.value;
        
        clearTimeout(debounceTimer);
        
        if (query.length < 3) {
            datalist.innerHTML = '';
            return;
        }
        
        debounceTimer = setTimeout(() => {
            fetch(`https://api-adresse.data.gouv.fr/search/?limit=5&q=${encodeURIComponent(query)}`)
                .then(response => response.json())
                .then(data => {
                    datalist.innerHTML = '';
                    (data.features || []).forEach(feature => {
                        const option = document.createElement('option');
                        option.value = feature.properties.label;
                        option.dataset.city = feature.properties.city || '';
                        option.dataset.postcode = feature.properties.postcode || '';
                        option.dataset.context = feature.properties.context || '';
                        datalist.appendChild(option);
                    });
                })
                .catch(err => console.error('Erreur API Adresse:', err));
        }, 300);
    });
    
    addressInput.addEventListener('change', function() {
        const selectedOption = Array.from(datalist.options).find(option => option.value === this.value);
        if (selectedOption) {
            const cityField = document.getElementById('city');
            const postalCodeField = document.getElementById('postal-code');
            const regionField = document.getElementById('region');
            
            if (cityField && selectedOption.dataset.city) {
                cityField.value = selectedOption.dataset.city;
                clearFieldError('city');
            }
            if (postalCodeField && selectedOption.dataset.postcode) {
                postalCodeField.value = selectedOption.dataset.postcode;
                clearFieldError('postal-code');
            }
            if (regionField && selectedOption.dataset.context) {
                const contextParts = selectedOption.dataset.context.split(', ');
                if (contextParts.length >= 3) {
                    regionField.value = contextParts[2];
                }
            }
        }
    });
}

async function confirmPaymentServer(orderId, paymentIntent) {
    try {
        const response = await fetch(`{{ path('payment_confirm', {orderId: '__ORDER_ID__'}) }}`.replace('__ORDER_ID__', orderId), {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                country: document.getElementById('country').value,
                address: document.getElementById('address').value,
                city: document.getElementById('city').value,
                region: document.getElementById('region').value,
                postal_code: document.getElementById('postal-code').value,
                card_holder_name: document.getElementById('card-holder-name').value,
                stripe_payment_intent: paymentIntent.id,
                payment_method_id: paymentIntent.payment_method
            })
        });
        
        const data = await response.json();
        
        if (data.error) {
            throw new Error(data.error);
        }
        
        showSuccess(orderId);
        
    } catch (error) {
        console.error('Server confirmation error:', error);
        showError('Erreur lors de la confirmation: ' + error.message);
    }
}

// Validation email en temps réel
function isValidEmail(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}

// Validation en temps réel des champs
document.addEventListener('DOMContentLoaded', function() {
    document.addEventListener('input', function(e) {
        if (e.target.id === 'email') {
            const email = e.target.value.trim();
            if (email.length > 0) {
                if (isValidEmail(email)) {
                    clearFieldError('email');
                } else {
                    showFieldError('email', 'Format d\'email invalide');
                }
            }
        }
        
        if (e.target.classList.contains('form-control') || e.target.classList.contains('form-select')) {
            if (e.target.value.trim().length > 0) {
                clearFieldError(e.target.id);
            }
        }
    });
});

// Fonctions utilitaires
function showFieldError(fieldId, message) {
    const field = document.getElementById(fieldId);
    const errorDiv = document.getElementById(fieldId + '-error');
    
    if (field) {
        field.classList.add('is-invalid');
    }
    if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
    }
}

function clearFieldError(fieldId) {
    const field = document.getElementById(fieldId);
    const errorDiv = document.getElementById(fieldId + '-error');
    
    if (field) {
        field.classList.remove('is-invalid');
    }
    if (errorDiv) {
        errorDiv.textContent = '';
        errorDiv.style.display = 'none';
    }
}

console.log('Core scripts loaded');
</script>
